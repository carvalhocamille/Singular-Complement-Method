%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%SCM.m 9/10/2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% FEM to solve scattering problem using P2 Lagrange FE with SCM
% The problem solved is the following:

% |  div(sigma Grad u)+ varsigma u = 0,        in DR,
% |                     u = f,                 on GammaR, 
% where DR is a disk of radius R, composed of 2 materials characterized by
% sigma and varsigma: these parameters can change sign

% This code uses a .msh mesh generated by GMSH that dictates the geoemtry

% 1) lecture_msh_P2.m:          extract information from the .msh
% 2) matrix_assembly.m:   assemble mass and stiffness matrices
% 3) build right hand side
% 4) solve the linear system
% 5) save and post-process the results

% Camille Carvalho, PhD
%%
 clear all;
 close all;
 
% =====================================================
%% -------------------Parameters to change-------------
% =====================================================

x0 = 0;                              %center of domain (x0,y0)
y0 = 0;
epsilonP = 1;                   
epsilonM = -0.83;  
RacineR = 1.322404244;
muP = 1;                   
muM = 1; 
angle= pi/6;                      %angle of the domain
k = 3;                            %wavenumber
kappa_epsilon  = epsilonM/ epsilonP;
kappa_mu  = muM/ muP;


fprintf('Parameter : kappa_epsilon =  %d \n',kappa_epsilon);

% =====================================================
%% 1) Read mesh
% =====================================================
mesh = 'disk.msh';
[Nbpt,Nbtri,Coorneu,Refneu,Numtri,Reftri,Nbaretes,Numaretes,Refaretes] = lecture_msh_P2(mesh);
Numtri2 = isop2(Numtri);

% Display mesh and test zones
Index0 = find(Refneu==1);
Index1 = find(Refneu==2);
Index2 = find(Refneu==3);
Index3 = find(Refneu==4);
Index4 = find(Refneu==5);
Index5 = find(Refneu==6);
Index6 = find(Refneu==7);
Index7 = find(Refneu==8);
figure(1);
scatter(Coorneu(Index1,1),Coorneu(Index1,2));
%trimesh(Numtri(Index1,:),Coorneu(Index1,1),Coorneu(Index1,2),zeros(length(Index1),1));
hold on;
scatter(Coorneu(Index2,1),Coorneu(Index2,2));
hold on;
scatter(Coorneu(Index3,1),Coorneu(Index3,2));
hold on;
scatter(Coorneu(Index4,1),Coorneu(Index4,2));
hold on;
scatter(Coorneu(Index5,1),Coorneu(Index5,2));
hold on;
scatter(Coorneu(Index6,1),Coorneu(Index6,2));
hold on;
scatter(Coorneu(Index7,1),Coorneu(Index7,2));
axis 'equal'
title(['Mesh and sub domains'],'Interpreter','Latex')
%trimesh(Numtri(Index0,:),Coorneu(Index0,1),Coorneu(Index0,2),ones(length(Index0),1));
fprintf('Display mesh and zones ... \n')
% =====================================================
%% Matrices and Unknowns
% =====================================================
MM    = sparse(Nbpt,Nbpt);  % mass matrix
KK    = sparse(Nbpt,Nbpt);  % stiffness matrix
SS    = sparse(Nbpt,Nbpt);  % surface mass matrix
F     = ones(Nbpt,1);       % rhs
FFreg = zeros(Nbpt,1);      % rhs for regular part
UU    = zeros(Nbpt,1);      % unknown using std FEM 
UUreg = zeros(Nbpt,1);      % unknown using std FEM + SCM
ZZ    = zeros(Nbpt,1);      % singular complement
X0 = x0*ones(Nbpt,1);
Y0 = y0*ones(Nbpt,1);

% =====================================================
%% -------------------Matrix assembly------------------
% =====================================================
[KK,MM,SS,SSm]=matrix_assembly(Coorneu,Numtri,Reftri,Numaretes,Refaretes,Nbaretes,epsilonP,epsilonM,muP,muM,k);
% =====================================================
%% ----------------Right-hand side---------------------
% =====================================================
FF = -MM*F;

% =====================================================
%% --------------------------Solving std---------------
% =====================================================
%Careful with the Dirichlet condition !
bdy = unique([Numaretes(:,1); Numaretes(:,2); Numaretes(:,3)]);
interior = find(ismember([1:Nbpt],bdy)==0);
NbptD = Nbpt - length(bdy);
UUD = zeros(NbptD,1);
KKD = KK(interior,interior);
MMD = MM(interior,interior);
FFD = FF(interior);
fprintf('Start solving for std FEM.....\n');
AAD =KKD+MMD; 
UUD = AAD\FFD;
UU(interior) = UUD;
fprintf('Solved\n');

% =====================================================
%% --------------------------Solving SCM---------------
% =====================================================

%Create cutoff function
delta = 0.1;
l= 0.9;
h = 0.001;
phi = pi/6;
[zeta, eta, etap, etapp] = cutoff(delta, l, h);
%Create exact expression for terms involving singularities
[Beta_s,div_s_grad_s, s_grad_s,singu] = singular_expression_radial(eta, etap, etapp, RacineR,phi,1./epsilonM,1./epsilonP);
[Beta_s_b,div_s_grad_s_b, s_grad_s_b,singu_b] = singular_expression_radial(eta, etap, etapp, -RacineR,phi,1./epsilonM,1./epsilonP);

%Create singularity vectors associated with DOFs
div_s_grad_sh = zeros(Nbpt,1);
singuh = zeros(Nbpt,1);
div_s_grad_sh_b = zeros(Nbpt,1);
singuh_b = zeros(Nbpt,1);
%%
[rr,tt] = meshgrid(0:10/30:5, -pi:2*pi/30:pi);
figure; surf(rr,tt,real(singu(rr,tt))); shading interp; grid off;view(2);colorbar;
xlabel('r'); ylabel('t');
%% 
% for k = 1: Nbpt
%     pt = k;
%     dist = sqrt(Coorneu(pt,1)^2 +Coorneu(pt,2)^2);
%     angle = atan2(Coorneu(pt,2),Coorneu(pt,1));
%    if ((Refneu(k)==5) || (Refneu(k)==8))
%        div_s_grad_sh(pt) = 0;
%        singuh(pt) = singu(dist,angle);
%    elseif ((Refneu(k)==3) || (Refneu(k)==6))
%        div_s_grad_sh(pt) = 0;
%        singuh(pt) = 0;
%    else
%         div_s_grad_sh(pt)= div_s_grad_s(dist,angle);
%         singuh(pt) = eta(dist) .* singu(dist,angle);
%    end
% end
for k = 1: Nbpt
    dist = sqrt(Coorneu(k,1)^2 +Coorneu(k,2)^2);
    angle = atan2(Coorneu(k,2),Coorneu(k,1));
    singuh(k) = eta(dist) .* singu(dist,angle);
    singuh_b(k) = eta(dist) .* singu_b(dist,angle);
     if (dist <= delta)
        div_s_grad_sh(k) = 0;
        div_s_grad_sh_b(k) = 0;
    else
        div_s_grad_sh(k)=  div_s_grad_s(dist,angle);
        div_s_grad_sh_b(k)= div_s_grad_s_b(dist,angle);
    end
end

 figure;
 trisurf(Numtri2,Coorneu(:,1),Coorneu(:,2),real(singuh));
 colorbar;
 view(2);shading interp;grid off; axis 'equal';
 title('\eta s_h')
 
 figure;
 trisurf(Numtri2,Coorneu(:,1),Coorneu(:,2),real(div_s_grad_sh));
 colorbar;
 view(2);shading interp;grid off; axis 'equal'; title('div(\sigma \nabla s)_h')
%% First approach
AA1 = sparse(NbptD,NbptD);
FF1 = zeros(NbptD,1);
ZZ1 = zeros(NbptD,1);
%Create regular terms with only FEM, need to find the corner
or = find(Coorneu ==[0 0]);
origin = or(1);
interior1  = find(ismember(interior,origin)==0);

%% Create coupling terms with NCQ
[BdS,BdSb] = NCQ(Coorneu,Numtri,Reftri,div_s_grad_sh,singuh,div_s_grad_sh_b,singuh_b,muM,muP,epsilonM,epsilonP);

%% Create system to solve to find the dual singularity

AA1(:,1:end-1)= -KK(interior,interior1)+MM(interior,interior1); %Matrix for regular part dual singularity
AA1(:,end) = BdS(interior);
FF1 = -BdSb(interior);

figure;
trisurf(Numtri2,Coorneu(:,1),Coorneu(:,2),real(BdSb));
colorbar;
view(2);shading interp;grid off; axis 'equal'; title('right hand side')

%% Compute the singularity coefficient
fprintf('Start solving for dual singularity.....\n'); 
ZZ1 = AA1\FF1;
ZZ = zeros(Nbpt,1);
ZZ(interior) = ZZ1;
fprintf('Solved\n');
 figure;
 trisurf(Numtri2,Coorneu(:,1),Coorneu(:,2),real(ZZ));
 colorbar;
shading interp;grid off; axis 'equal'; colorbar; 
 title('singular complement')

%% Subtract the singular part and solve the regular problem
% rhs = zeros(Nbpt,1);
% FFreg = FF - b*rhs;
% FFDreg = FFreg(interior);
% fprintf('Start solving for SCM + FEM.....\n'); 
% UUreg = AAD\FFDreg;
% fprintf('Solved\n');
% 
% 
% % Former technique to compute the singularity coefficient
% PhiS  = SS*Phi2; 
% ind = find(PhiS);
% Val = 2 * RacineR * dot(Phi2(ind),PhiS(ind))
% b = - k^2 * dot(F, SSm * ZZ)/Val;




% =====================================================
%% --------------------------Saving-------------------
% =====================================================

% =====================================================
%% --------------------------Display-------------------
% =====================================================%
%Relift:
UU = UU +ones(Nbpt,1); 
%%
 figure;
 trisurf(Numtri2,Coorneu(:,1),Coorneu(:,2),real(UU));
 colorbar;
 view(2);shading interp;grid off; axis 'equal';
 %UM = max(real(UU));
 %Um = min(real(UU));
 %caxis([Um UM]);
 caxis([-7 2]);
 %axis off;
RR1 = [0:0.05:0.25];
RR2 = [-0.25:0.05:0];
Y1 = -RR1*tan(pi/2-pi/12);
Y2 = RR2*tan(pi/2-pi/12);
Z = max(UU)+ 0.*RR1;
title(['re(u)'],'Interpreter','Latex')
 %figure(3);
%hold on;plot3(RR1,Y1,Z,'k');
%hold on;plot3(RR2,Y2,Z,'k');

